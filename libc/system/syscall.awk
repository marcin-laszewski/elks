#!/usr/bin/awk -f

BEGIN {
	if (defn_tab == "" \
	&& call_tab == "" \
	&& file_mk == "" \
	&& syscall == "") {
		print "syscall.awk [-v call_tab=...] [-v defn_tab=...] [-v file_mk=...] [-v syscall=...]" > "/dev/stderr";
		exit 1;
	}
}

function print_syscall(file, p3, p4)
{
	printf "\t_syscall_" > file;
	if(p4 != "!" || p3 < 1)
		printf "%d", p3 > file;
	else
		printf "%dp", p3 - 1 > file;
	print "" > file;
}

BEGIN {
	if (file_mk != "")
		print "SYSCALL_OBJS += \\" > file_mk;
}

/^[	 ]*#/ { next; }
/^[	 ]*$/ { next; }
{
	callno = $2 + 0;
	if (!(callno in calltab))
		callwas [callno] = $1;

	if ($3 == "x" || $3 == "") next;
	else if ($4 == "@" || $4 == "-") next;
	else if ($4 == "*") funcname = "_" $1;
	else funcname = $1;

	if (callno > max_call) max_call = callno;
	calltab [callno] = $1;

	if (syscall != "" && syscall == funcname) {
		#sf = syscall_dir "/" funcname ".s";
		#print "->\t" sf;
		sf = "/dev/stdout";

		print "// This file is automatically generated from syscall.dat" > sf;
		print "// See syscall.awk for details" > sf;
		print "\t.code16" > sf;
		print "\t.text" > sf;
		printf "\t.extern" > sf;
		print_syscall(sf, $3, $4)
		printf "\t.global %s\n", funcname > sf;
		printf "%s:\n", funcname > sf;
		regparmcall += 0;
		if (regparmcall)
			printf "\tmov\t$%d,%%bx\n", callno > sf;
		else
			printf "\tmov\t$%d,%%ax\n", callno > sf;
		printf "\tjmp" > sf;
		print_syscall(sf, $3, $4);
		close(sf);
	}

	if (file_mk != "")
		printf " %s.o \\\n", funcname > file_mk;
}
END {
	if (defn_tab != "")
		for (i = 0; i <= max_call; i++)
			if (i in calltab) {
				printf ("#ifndef sys_%s\n", calltab [i]) > defn_tab;
				printf ("#\tdefine sys_%s sys_enosys\n", calltab [i]) > defn_tab;
				printf ("#endif\n\n") > defn_tab;
			}

	if (call_tab != "")
		for (i = 0; i <= max_call; i++)
			if (i in calltab) {
				printf ("/* %3d */\tsys_%s,\n", i, calltab [i]) > call_tab;
			}
			else
				printf("/* %3d */\tsys_enosys,\t/* %s */\n", i, callwas [i]) > call_tab;

	exit 0;
}
