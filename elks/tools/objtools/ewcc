#!/usr/bin/env bash
#
# ewcc - OpenWatcom owcc/wcc script for ELKS
#
# Usage: ewcc [-{owcc option}] [--{option}(wcc -Wc,option)] file.c ...
#   produces filename.obj
#
# 3 Jun 2024 Initial version
# 3 Jul 2024 Added -options for owcc and --options for wcc
#
set -e

if [ -z "$TOPDIR" ]
  then
    echo "ELKS TOPDIR= environment variable not set"
    exit
fi

if [ -z "$WATCOM" ]
  then
    echo "WATCOM= environment variable not set to compiler path"
    exit
fi

if [ -z "$WATDIR" ]
  then
    echo "WATDIR= environment variable not set to Watcom source directory"
    exit
fi

ELKSLIBCINCLUDE=$TOPDIR/libc/include
ELKSINCLUDE1=$TOPDIR/include
ELKSINCLUDE2=$TOPDIR/elks/include
WATCINCLUDE=$WATDIR/bld/hdr/dos/h

# owcc options:
# -mcmodel={s,m,c,l}        # memory model
# -march=i86                # 8086 codegen
# -bos2                     # produce OS/2 exe
# -std=c99                  # -Wc,-za99
# -Wc,-zev                  # enable void arithmetic
# -Wc,-wcd=N                # disable warning N
# -Wc,-fpi87                # inline 8087 fp
# unused:
# -mhard-emu-float          # -Wc,-fpi (inline 8087 w/emulation)
# -msoft-float              # -Wc,-fpc
# -Wc,-fpc                  # non-IEEE soft fp
# -fpmath
# -mabi=cdecl               # push all args
# -fnonconst-initializers   # -Wc,aa

source $TOPDIR/libc/watcom.model

CCFLAGS="\
    -mcmodel=$MODEL                 \
    -march=i86                      \
    -Os                             \
    -bos2                           \
    -std=c99                        \
    -Wc,-fpi87                      \
    -Wc,-zev                        \
    -fno-stack-check                \
    -fnostdlib                      \
    -Wall -Wextra                   \
    -Wc,-wcd=303                    \
    -I$ELKSLIBCINCLUDE              \
    -I$ELKSINCLUDE1                 \
    -I$ELKSINCLUDE2                 \
    -I$WATCINCLUDE                  \
    "

while true; do
  case "$1" in
    --*)
        a=${1:1}
        echo "Adding -Wc,$a"
        CCFLAGS="$CCFLAGS -Wc,$a"
        shift ;;
    -*)
        echo "Adding $1"
        CCFLAGS="$CCFLAGS $1"
        shift ;;
    *)  break ;;
  esac
done

if [ $# -eq 0 ]
  then
    echo "Usage: ewcc [-{owcc option}] [--{option}(wcc -Wc,option)] file.c ..."
    exit
fi

for PROG in $@
do
    echo owcc -v -c $CCFLAGS -o ${PROG%.c}.obj $PROG
    owcc -v -c $CCFLAGS -o ${PROG%.c}.obj $PROG
done

# dump OBJ file
#omfdump ${PROG%.c}.obj

# disassemble OBJ file
#wdis -p -e ${PROG%.c}.obj
